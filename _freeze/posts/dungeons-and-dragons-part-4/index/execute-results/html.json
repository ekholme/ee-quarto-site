{
  "hash": "f3c924630bd394809244a64ae6bcba18",
  "result": {
    "markdown": "---\ntitle: \"Dungeons and Dragons - Part 4\"\ndescription: |\n  Predicting monster challenge ratings & examining regression diagnostics\ndate: \"2021-03-10\"\ncategories: [R, tutorial, D&D, regression]\n---\n\n\n\nIn a few of my earlier posts, I walked through [pulling Dungeons and Dragons data from an API](https://www.ericekholm.com/posts/2021-01-11-dungeons-and-dragons-part-1/), [exploring data on D&D monsters](https://www.ericekholm.com/posts/2021-01-11-dungeons-and-dragons-part-2/), and [using latent profile analysis to place these monsters into groups](https://www.ericekholm.com/posts/2021-02-03-dungeons-and-dragons-part-3/). In this last post of this D&D mini-series, I'm going to try to use monsters' statistics to predict their challenge rating, i.e. how difficult the monster is to fight (which the name pretty much gives away). I'm going to use this as an opportunity to explore some model diagnostics and talk about tradeoffs in fitting models.\n\nBefore getting into this, I want to give a shoutout to [Julia Silge's recent-ish blog post](https://juliasilge.com/blog/tate-collection/) that gave me the idea (and some of the code) to explore model diagnostics via `{tidymodels}`. So let's get going!\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(eemisc) #ggplot theme\nlibrary(jsonlite) #work with json data\nlibrary(harrypotter) #colors\nlibrary(tidymodels)\nlibrary(finetune)\nlibrary(vip)\nlibrary(tidytext)\n\nherm <- harrypotter::hp(n = 1, option = \"HermioneGranger\")\n\nopts <- options(\n  ggplot2.discrete.fill = list(\n    harrypotter::hp(n = 3, option = \"HermioneGranger\"),\n    harrypotter::hp(n = 7, option = \"Always\")\n  )\n)\n\ntheme_set(theme_ee())\n\ndnd_base <- \"https://www.dnd5eapi.co/api/monsters/\"\n\n#getting data from api -- see 1st d&d post\n#for process explanation\n\nfetch_monster <- function(monster) {\n  dnd_url <- \"https://www.dnd5eapi.co/api/monsters/\"\n  \n  ret <- fromJSON(paste0(dnd_url, monster)) %>%\n    enframe() %>%\n    pivot_wider(names_from = name,\n                values_from = value)\n  \n  return(ret)\n}\n\ncompare_lens <- function(x, size = 1) {\n  all(map_lgl(x, ~length(unlist(.x)) == size))\n}\ncond_unlist <- function(x) {\n  if (compare_lens(x) == TRUE) {\n    unlist(x)\n  } else {\n    x\n  }\n}\n\nmons <- fromJSON(dnd_base)$results %>%\n  pull(index)\n\nmonster_lists <- purrr::map(mons, fetch_monster)\n\nmons_bind <- bind_rows(monster_lists)\n\nmons_df <- mons_bind %>%\n  mutate(across(.cols = everything(), ~cond_unlist(x = .x)))\n```\n:::\n\n\n\nLet's take a look at our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mons_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 334\nColumns: 31\n$ index                  <chr> \"aboleth\", \"acolyte\", \"adult-black-dragon\", \"ad…\n$ name                   <chr> \"Aboleth\", \"Acolyte\", \"Adult Black Dragon\", \"Ad…\n$ size                   <chr> \"Large\", \"Medium\", \"Huge\", \"Huge\", \"Huge\", \"Hug…\n$ type                   <chr> \"aberration\", \"humanoid\", \"dragon\", \"dragon\", \"…\n$ alignment              <chr> \"lawful evil\", \"any alignment\", \"chaotic evil\",…\n$ armor_class            <int> 17, 10, 19, 19, 18, 19, 18, 19, 19, 19, 19, 18,…\n$ hit_points             <int> 135, 9, 195, 225, 172, 212, 184, 256, 207, 256,…\n$ hit_dice               <chr> \"18d10\", \"2d8\", \"17d12\", \"18d12\", \"15d12\", \"17d…\n$ speed                  <list> [\"10 ft.\", \"40 ft.\"], [\"30 ft.\"], [\"40 ft.\", \"…\n$ strength               <int> 21, 10, 23, 25, 23, 25, 23, 27, 23, 27, 27, 22,…\n$ dexterity              <int> 9, 10, 14, 10, 10, 10, 12, 14, 12, 10, 10, 10, …\n$ constitution           <int> 15, 10, 21, 23, 21, 23, 21, 25, 21, 25, 25, 22,…\n$ intelligence           <int> 18, 10, 14, 16, 14, 16, 18, 16, 18, 16, 16, 8, …\n$ wisdom                 <int> 15, 14, 13, 15, 13, 15, 15, 15, 15, 13, 13, 12,…\n$ charisma               <int> 18, 11, 17, 19, 17, 19, 17, 24, 17, 21, 21, 12,…\n$ proficiencies          <list> [<data.frame[5 x 2]>], [<data.frame[2 x 2]>], …\n$ damage_vulnerabilities <list> [], [], [], [], [], [], [], [], [], [], [], []…\n$ damage_resistances     <list> [], [], [], [], [], [], [], [], [], [], [], []…\n$ damage_immunities      <list> [], [], \"acid\", \"lightning\", \"fire\", \"lightnin…\n$ condition_immunities   <list> [], [], [], [], [], [], [], [], [<data.frame[1…\n$ senses                 <list> [\"120 ft.\", 20], [12], [\"60 ft.\", \"120 ft.\", 2…\n$ languages              <chr> \"Deep Speech, telepathy 120 ft.\", \"any one lang…\n$ challenge_rating       <dbl> 10.00, 0.25, 14.00, 16.00, 13.00, 15.00, 14.00,…\n$ xp                     <int> 5900, 50, 11500, 15000, 10000, 13000, 11500, 18…\n$ special_abilities      <list> [<data.frame[3 x 3]>], [<data.frame[1 x 3]>], …\n$ actions                <list> [<data.frame[4 x 7]>], [<data.frame[1 x 4]>], …\n$ legendary_actions      <list> [<data.frame[3 x 4]>], [], [<data.frame[3 x 4]…\n$ url                    <chr> \"/api/monsters/aboleth\", \"/api/monsters/acolyte…\n$ subtype                <list> <NULL>, \"any race\", <NULL>, <NULL>, <NULL>, <N…\n$ reactions              <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>…\n$ forms                  <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>…\n```\n:::\n:::\n\n\n\nThere's a ton of data here, and a lot of it is still in deep-list-land. If this were a \"real\" project (i.e. not a blog post and something with stakes tied to it), I'd probably going digging more through these lists to search for useful features. But since this *is* just a blog post, I'm largely going to focus on the easy-to-use data (i.e. stuff that's already a good-old atomic vector).\n\n\n# Feature Engineering\n\nThat said, one feature I do want to add is whether or not the monster is a spellcaster. And because I've dug around in this data a little bit before (and because I play D&D), I know this is contained within the \"special abilities\" list-column. So, I'm going to enlist some help from `{purrr}'s` `map_int()` and `pluck()` to dig into this column, identify monsters that have a can cast spells (they'll have an ability called either \"Spellcasting\" or \"Innate Spellcasting\"), and then create a binary yes/no feature.\n\nBeyond that, I'm going to keep a handful of other potentially useful features:\n- size (a nominal feature ranging from \"tiny\" to \"gargantuan\"),\n- type (a nominal feature indicating whether the monster is a humanoid, beast, dragon, etc),\n- armor class (a numeric feature indicating how much armor a monster has), and\n- all of the ability scores (strength through intelligence; all numeric)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmons_df_small <- mons_df %>%\n  mutate(spellcaster = map_int(seq_along(1:nrow(mons_df)), ~pluck(mons_df$special_abilities, .x, \"name\") %>%\n                                 paste(collapse = \", \") %>%\n                                 str_detect(\"Spellcast\"))) %>%\n  select(index, size, type, armor_class, strength, dexterity, constitution, wisdom, charisma, intelligence, spellcaster, challenge_rating)\n```\n:::\n\n\n\n# Splitting Data\n\nNow I can get into the `{tidymodels}` flow of splitting data, specifying a recipe, specifying a model, tuning the model, etc. We'll use bootstrapping here rather than cross validation to split our data because we have a pretty small sample size in the training set (268 obs).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0408)\nmons_split <- initial_split(mons_df_small, strata = challenge_rating, prop = 4/5)\ntrn <- training(mons_split)\ntst <- testing(mons_split)\n\n#and also getting our folds\nbooties <- bootstraps(trn)\n```\n:::\n\n\n\n# Preprocessing with Recipes\n\nI'm going to do some pretty minimal preprocessing here. There's more I could do (and I'll revisit some later, actually), but for now I'm just going to:\n\n- Tell the model not to use `index`, which is an id column, in the model,\n- Create an \"other\" category for type (since there are many types, some with low counts),\n- Scale all of the numeric variables, and\n- Dummy-out the size and type variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmons_rec <- recipe(challenge_rating ~ ., data = trn) %>%\n  update_role(index, new_role = \"id_var\") %>%\n  step_other(type) %>%\n  step_scale(armor_class, strength, dexterity, constitution, wisdom, charisma, intelligence) %>%\n  step_dummy(size, type)\n```\n:::\n\n\n\n# Setting Model Specifications\n\nNext, I'll specify the model I want to fit. Again, there are lots of options here, and if I wanted the best-performing model, I might use xgboost or catboost or something, but I'm just going to stick with a linear model here because I think it will do decently well and they're faster. More specifically, I'm going to use a lasso model to regularize the regression and potentially do some feature selection for me.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_spec <- linear_reg(penalty = tune(), mixture = 1) %>%\n  set_engine(\"glmnet\")\n\n#and combining into a workflow\nlasso_wf <- workflow() %>%\n  add_recipe(mons_rec) %>%\n  add_model(lasso_spec)\n```\n:::\n\n\n# Fitting Model\n\nNow we fit the model. Even though this should be quick to fit, I'm going to use `tune_race_anova()` from the `{finetune}` package (rather than, say, `tune_grid()`) to speed up the process a little bit (see [Max Kuhn's video from rstudioconf 2021 for more details about this](https://rstudio.com/resources/rstudioglobal-2021/whats-new-in-tidymodels/)).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndoParallel::registerDoParallel()\nset.seed(0408)\n\nlasso_res <- tune_race_anova(\n  lasso_wf,\n  resamples = booties\n)\n```\n:::\n\n\n\n# Model Selection\n\nNow that the models are fit, I'll look at the accuracy metrics real quick via `autoplot()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(lasso_res)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\nIt looks like the best model here has an R-squared of ~.85, which is really good (well, I'm used to modeling education data, where an R-squared of .85 is obscenely high, but I suppose other people's mileage may vary). I'm going to select the simplest model here that is within 1 standard error of the numerically best model, in the hopes that this will give me some feature selection as well. And once I select that, I'm going to finalize the workflow and use `last_fit()` to train the model with the selected parameters on the full training set and then evaluate it on the test set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- select_by_one_std_err(lasso_res, metric = \"rmse\", penalty)\n\nlasso_fin_wf <- finalize_workflow(lasso_wf, params)\n\n#and doing our last fit\nlasso_fin_fit <- last_fit(lasso_fin_wf, mons_split)\n```\n:::\n\n\n\nFrom there, we can check out the final model's performance on the test set.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#check out final test set performance\ncollect_metrics(lasso_fin_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       2.58  Preprocessor1_Model1\n2 rsq     standard       0.818 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\nOur R-squared on the test set is .871, which is even better than we did on our bootstraps earlier. Not bad!\n\n# Diagnosing Model\n\nWe could stop here, but I think it's worthwhile to dig into our model a bit more to see if anything stands out/if there's a way we could improve it. To do this, I'm going to look at a few plots:\n\n- the predicted values vs the actual values, and\n- the predicted values vs the residuals\n\nFirst, let's look at predicted values vs the actual challenge ratings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_predictions(lasso_fin_fit) %>%\n  ggplot(aes(x = challenge_rating, y = .pred)) +\n  geom_abline(lty = 2) +\n  geom_point(color = herm, alpha = .4)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nSo, there are a number of things that stand out to me. First, it's clearly not a bad model, but there are some areas where the model is missing by quite a bit. For instance, there's quite a bit of variability in predictions for low-CR monsters, and even some negative predictions (which isn't possible). \n\nLet's also take a look at the residuals vs the predictions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\naugment(lasso_fin_fit) %>%\n  ggplot(aes(x = .pred, y = .resid)) +\n  geom_point(color = herm, alpha = .4) +\n  geom_smooth(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nWhat we'd want to see here is basically no pattern, and a constant variance in the residuals, which isn't quite what we get here (although this is going to be somewhat harder to see with a small sample, since this is just plotting the 64-observation test data).\n\nAgain -- this isn't a terrible model, but there are a few things we could do to improve it. One would be to drop the Tarrasque observation, since it's an extreme CR (it has a CR of 30, which is well beyond any other monster). It doesn't show up in the plot above, but I know from previous data exploration that it's different from other monsters.\n\nAnother approach is to log-transform challenge_rating (our DV), since I know from [previous exploration](https://www.ericekholm.com/posts/2021-01-11-dungeons-and-dragons-part-2/) that it has a strong right skew. This might help with unequal variances in the error terms.\n\n(n.b. that there are other approaches we could take, too, including fitting different type of model or doing some more feature engineering).\n\n\n# Refitting with a Log-Transformed DV \n\nI won't walk through everything here, but I'm basically redoing all of the previous steps, but adding a log transformation to challenge_rating.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmons_rec2 <- recipe(challenge_rating ~ ., data = trn) %>%\n  update_role(index, new_role = \"id_var\") %>%\n  step_log(all_outcomes(), offset = .1) %>%\n  step_other(type) %>%\n  step_scale(armor_class, strength, dexterity, constitution, wisdom, charisma, intelligence) %>%\n  step_dummy(size, type)\n\nlasso_wf2 <- workflow() %>%\n  add_recipe(mons_rec2) %>%\n  add_model(lasso_spec)\n\n#fitting model\ndoParallel::registerDoParallel()\nset.seed(0408)\n\nlasso_res2 <- tune_race_anova(\n  lasso_wf2,\n  resamples = booties\n)\n\nparams2 <- select_by_one_std_err(lasso_res2, metric = \"rmse\", penalty)\n\nlasso_fin_wf2 <- finalize_workflow(lasso_wf2, params2)\n\n#and doing our last fit\nlasso_fin_fit2 <- last_fit(lasso_fin_wf2, mons_split)\n\ncollect_metrics(lasso_fin_fit2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       0.739 Preprocessor1_Model1\n2 rsq     standard       0.796 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\nWe see that this model gives us basically the same R-squared. The RMSE isn't directly comparable since we've log-transformed the outcome. But let's take a look at our predictions. To do that, I first need to recalculate the predictions and residuals to account for the log scale here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_fit2_aug <- augment(lasso_fin_fit2) %>%\n  mutate(pred = exp(.pred),\n         resid = challenge_rating - pred)\n\nlasso_fit2_aug %>%\n  ggplot(aes(x = challenge_rating, y = pred)) +\n  geom_point(color = herm, alpha = .4) +\n  geom_abline(lty = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nOk, so, this model does *a lot better* for very low CR monsters than the previous model did. And recall that most monsters are low CR. However, it seems to perform worse for very high CR monsters -- we can see that it's predicting a CR of over 35 for a monster with an actual CR of 24, which is a pretty big miss.\n\nWe can see something similar when plotting our residuals vs predictions. Through, say, CR 10, the model seems decent, but not so much after that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_fit2_aug %>%\n  ggplot(aes(x = pred, y = resid)) +\n  geom_point(color = herm, alpha = .4) +\n  geom_smooth(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\nSo which of these is the better model? Neither is ideal, obviously, but it depends on what you want to do. The first model seems to be more stable (but not great) across all possible CR values (although let's not forget that it gave us some negative predictions, which isn't good). The second model is much better at predicting low CR monsters but much worse at predicting high CR monsters. I sort of like the 2nd one better since low CR monsters are much more common.\n\n# Interpreting Coefficients\n\nFinally, let's interpret the coefficients of this second model. Again, bear in mind that these are the coefficients of a model that does not do a good job at predicting high CR monsters. I'm going to facet these coefficients out so that things in the same facet are roughly comparable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_coefs <- pull_workflow_fit(lasso_fin_fit2$.workflow[[1]]) %>%\n  vi()\n\nlasso_coefs %>%\n  mutate(Importance = if_else(Sign == \"NEG\", -1*Importance, Importance)) %>%\n  mutate(coef_type = case_when(\n    str_detect(Variable, \"type\") ~ \"Monster Type\",\n    str_detect(Variable, \"size\") ~ \"Monster Size\",\n    TRUE ~ \"Other\"\n  )) %>%\n  ggplot(aes(y = reorder_within(Variable, Importance, coef_type), x = Importance)) +\n  geom_col(aes(fill = Importance > 0)) +\n  facet_wrap(vars(coef_type), scales = \"free\") +\n  scale_y_reordered() +\n  labs(\n    y = NULL,\n    x = \"Beta\"\n  ) +\n  theme(\n    legend.position = \"none\",\n    plot.margin = margin(t = 14, b = 14, l = 7, r = 7)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nI'd take the \"size\" stuff here with a grain of salt, since the reference category is \"gargantuan\" and those are the monsters it does the worst with. The \"type\" coefficients make sense to me -- the reference category is \"beast,\" and I'd expect those to generally have lower CRs than like fiends (demons & whatnot), monstrosities, etc. And of the coefficients in \"other,\" it's no surprise that constitution is the strongest predictor -- regardless of how a monster fights or what you expect them to do, harder monsters will have more health. We also see that our spellcaster binary feature (which is not on the same scale as the others in this facet) has a positive effect.\n\n\nThat's going to be it for now, and probably the end of this little D&D series of posts. There's a lot more that could be done with this data -- both with the monster data and with other data available through the API -- so who knows, I may pick it back up at some point.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}