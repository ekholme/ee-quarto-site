{
  "hash": "95cf23c9549a0d726263101a3da870c4",
  "result": {
    "markdown": "---\ntitle: \"Scooby Doo EDA\"\ndescription: |\n  Stream-of-consciousness exploration and modeling\ndate: \"2021-07-20\"\ncategories: [R, EDA, Scooby Doo, regression]\n---\n\n\n\nFor this week's (well, really last week's) #TidyTuesday, I wanted to do a sort of stream-of-consciousness type EDA and modeling that I'll put up as a blog post. One motivation for this is that I'm considering doing some data science streaming in the future, and so I want to get a feel for whether this is an approach I might be interested in taking with streaming. So, the narrative here might be a bit lacking.\n\nI'm going to shoot for spending an hour-ish on this, but I might end up doing more or less.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(eemisc)\nlibrary(harrypotter)\nlibrary(lubridate)\n\nherm <- harrypotter::hp(n = 1, option = \"HermioneGranger\")\n\nopts <- options(\n  ggplot2.discrete.fill = list(\n    harrypotter::hp(n = 2, option = \"HermioneGranger\"),\n    harrypotter::hp(n = 3, option = \"HermioneGranger\"),\n    harrypotter::hp(n = 7, option = \"Always\")\n  )\n)\n\ntheme_set(theme_ee())\n\nscooby_raw <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv', na = c(\"\", \"NA\", \"NULL\"))\n```\n:::\n\n\n\nWhat does the data look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(scooby_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 603\nColumns: 75\n$ index                    <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14…\n$ series_name              <chr> \"Scooby Doo, Where Are You!\", \"Scooby Doo, Wh…\n$ network                  <chr> \"CBS\", \"CBS\", \"CBS\", \"CBS\", \"CBS\", \"CBS\", \"CB…\n$ season                   <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", …\n$ title                    <chr> \"What a Night for a Knight\", \"A Clue for Scoo…\n$ imdb                     <dbl> 8.1, 8.1, 8.0, 7.8, 7.5, 8.4, 7.6, 8.2, 8.1, …\n$ engagement               <dbl> 556, 479, 455, 426, 391, 384, 358, 358, 371, …\n$ date_aired               <date> 1969-09-13, 1969-09-20, 1969-09-27, 1969-10-…\n$ run_time                 <dbl> 21, 22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 2…\n$ format                   <chr> \"TV Series\", \"TV Series\", \"TV Series\", \"TV Se…\n$ monster_name             <chr> \"Black Knight\", \"Ghost of Cptn. Cuttler\", \"Ph…\n$ monster_gender           <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Female\", \"Ma…\n$ monster_type             <chr> \"Possessed Object\", \"Ghost\", \"Ghost\", \"Ancien…\n$ monster_subtype          <chr> \"Suit\", \"Suit\", \"Phantom\", \"Miner\", \"Witch Do…\n$ monster_species          <chr> \"Object\", \"Human\", \"Human\", \"Human\", \"Human\",…\n$ monster_real             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ monster_amount           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 2, 1, 1, …\n$ caught_fred              <lgl> FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE,…\n$ caught_daphnie           <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ caught_velma             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ caught_shaggy            <lgl> TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE…\n$ caught_scooby            <lgl> TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE,…\n$ captured_fred            <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ captured_daphnie         <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ captured_velma           <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALS…\n$ captured_shaggy          <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ captured_scooby          <lgl> FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALS…\n$ unmask_fred              <lgl> FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, …\n$ unmask_daphnie           <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ unmask_velma             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ unmask_shaggy            <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRU…\n$ unmask_scooby            <lgl> TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE…\n$ snack_fred               <lgl> TRUE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE,…\n$ snack_daphnie            <lgl> FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE…\n$ snack_velma              <lgl> FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, TRUE…\n$ snack_shaggy             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ snack_scooby             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ unmask_other             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ caught_other             <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ caught_not               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ trap_work_first          <lgl> NA, FALSE, FALSE, TRUE, NA, TRUE, FALSE, FALS…\n$ setting_terrain          <chr> \"Urban\", \"Coast\", \"Island\", \"Cave\", \"Desert\",…\n$ setting_country_state    <chr> \"United States\", \"United States\", \"United Sta…\n$ suspects_amount          <dbl> 2, 2, 0, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 2, 1, …\n$ non_suspect              <lgl> FALSE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE…\n$ arrested                 <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FAL…\n$ culprit_name             <chr> \"Mr. Wickles\", \"Cptn. Cuttler\", \"Bluestone th…\n$ culprit_gender           <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male…\n$ culprit_amount           <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, …\n$ motive                   <chr> \"Theft\", \"Theft\", \"Treasure\", \"Natural Resour…\n$ if_it_wasnt_for          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"thes…\n$ and_that                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"dog\"…\n$ door_gag                 <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ number_of_snacks         <chr> \"2\", \"1\", \"3\", \"2\", \"2\", \"4\", \"4\", \"0\", \"1\", …\n$ split_up                 <dbl> 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, …\n$ another_mystery          <dbl> 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ set_a_trap               <dbl> 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, …\n$ jeepers                  <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ jinkies                  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ my_glasses               <dbl> 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, …\n$ just_about_wrapped_up    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ zoinks                   <dbl> 1, 3, 1, 2, 0, 2, 1, 0, 0, 0, 0, 6, 3, 5, 8, …\n$ groovy                   <dbl> 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, …\n$ scooby_doo_where_are_you <dbl> 0, 1, 0, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, …\n$ rooby_rooby_roo          <dbl> 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 3, 0, 0, 0, …\n$ batman                   <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ scooby_dum               <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ scrappy_doo              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ hex_girls                <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ blue_falcon              <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n$ fred_va                  <chr> \"Frank Welker\", \"Frank Welker\", \"Frank Welker…\n$ daphnie_va               <chr> \"Stefanianna Christopherson\", \"Stefanianna Ch…\n$ velma_va                 <chr> \"Nicole Jaffe\", \"Nicole Jaffe\", \"Nicole Jaffe…\n$ shaggy_va                <chr> \"Casey Kasem\", \"Casey Kasem\", \"Casey Kasem\", …\n$ scooby_va                <chr> \"Don Messick\", \"Don Messick\", \"Don Messick\", …\n```\n:::\n:::\n\n\n\nWhat's the range of dates we're looking at here?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(scooby_raw$date_aired)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1969-09-13\" \"2021-02-25\"\n```\n:::\n:::\n\n\nAnd how many episodes are we seeing each year?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  count(year(date_aired)) %>%\n  rename(year = 1) %>%\n  ggplot(aes(x = year, y = n)) +\n  geom_col(fill = herm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWhat about episodes by decade?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw%>%\n  count(10*year(date_aired) %/% 10) %>%\n  rename(decade = 1) %>%\n  ggplot(aes(x = decade, y = n)) +\n  geom_col(fill = herm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nNext, let's look at what ratings look like over time: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  ggplot(aes(x = index, y = imdb)) +\n  geom_point() +\n  geom_line() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nAnd what if we color the points by series -- I'd imagine series might have different ratings:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  ggplot(aes(x = index, y = imdb)) +\n  geom_point(aes(color = series_name)) +\n  geom_line(color = \"grey70\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nNext, I'm interested in looking at some comparisons across characters for different actions they take, like unmasking baddies, getting caught, etc. There are a bunch of these logical columns (e.g. `unmask_fred`), and so I'll write a little helper function to summarize them and then pivot them into a shape that'll be easier to plot later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummarize_pivot <- function(df, str) {\n  \n  df %>%\n    summarize(across(starts_with(str), ~sum(.x, na.rm = TRUE))) %>%\n    pivot_longer(\n      cols = everything(),\n      names_to = \"key\",\n      values_to = \"value\"\n    ) %>%\n    extract(col = key, into = c(\"key\", \"char\"), regex = \"^(.*)_(.*)$\") %>%\n    arrange(desc(value))\n}\n```\n:::\n\n\n\nAn example of what this does:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  summarize_pivot(\"unmask\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  key    char    value\n  <chr>  <chr>   <int>\n1 unmask fred      102\n2 unmask velma      94\n3 unmask daphnie    37\n4 unmask other      35\n5 unmask scooby     23\n6 unmask shaggy     13\n```\n:::\n:::\n\n\n\nAaaand another example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  summarize_pivot(\"caught\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  key    char    value\n  <chr>  <chr>   <int>\n1 caught scooby    160\n2 caught fred      132\n3 caught other      84\n4 caught shaggy     77\n5 caught velma      41\n6 caught not        31\n7 caught daphnie    29\n```\n:::\n:::\n\n\n\nNext, let's use `purrr::map()` to do this a few times, combine the results into a df, and then make a plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\niter_strs <- c(\"caught\", \"captured\", \"unmask\", \"snack\")\n\nactions_df <- map_dfr(iter_strs, ~summarize_pivot(scooby_raw, .x))\n\nglimpse(actions_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 23\nColumns: 3\n$ key   <chr> \"caught\", \"caught\", \"caught\", \"caught\", \"caught\", \"caught\", \"cau…\n$ char  <chr> \"scooby\", \"fred\", \"other\", \"shaggy\", \"velma\", \"not\", \"daphnie\", …\n$ value <int> 160, 132, 84, 77, 41, 31, 29, 91, 85, 83, 74, 71, 102, 94, 37, 3…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nactions_df %>%\n  ggplot(aes(x = value, y = char, fill = key)) +\n  geom_col() +\n  facet_wrap(vars(key), scales = \"free_y\") +\n  theme(\n    legend.position = \"none\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nRight, so we see that all of the characters get captured more or less the same amount, Fred and Scooby tend to catch monsters the most, Daphnie and Shaggy eat the most snacks, and Velma and Fred do the most unmasking.\n\n\nSwitching up a bit, what if we want to look at monster's motives? First let's take a look at all of the unique motives.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(scooby_raw$motive)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Theft\"            \"Treasure\"         \"Natural Resource\" \"Competition\"     \n [5] \"Extortion\"        \"Safety\"           \"Counterfeit\"      \"Inheritance\"     \n [9] \"Smuggling\"        \"Preservation\"     NA                 \"Experimentation\" \n[13] \"Food\"             \"Trespassing\"      \"Assistance\"       \"Abduction\"       \n[17] \"Haunt\"            \"Anger\"            \"Imagination\"      \"Bully\"           \n[21] \"Loneliness\"       \"Training\"         \"Conquer\"          \"Mistake\"         \n[25] \"Automated\"        \"Production\"       \"Entertainment\"    \"Simulation\"      \n```\n:::\n:::\n\n\n\nAnd it's probably useful to count these:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>% \n  count(motive, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 2\n   motive               n\n   <chr>            <int>\n 1 Competition        168\n 2 Theft              125\n 3 <NA>                67\n 4 Treasure            54\n 5 Conquer             42\n 6 Natural Resource    26\n 7 Smuggling           22\n 8 Trespassing         15\n 9 Abduction           12\n10 Food                11\n# … with 18 more rows\n```\n:::\n:::\n\n\n\nSo, \"Competition\" is far and away the most common motive. I'm not sure I really understand what this means? But it's also been a while since I've watched Scooby Doo.\n\nI'm also interested in how often we see \"zoinks\" in episodes, bc I feel like this is the defining line of the show (along with the meddling kids, which I'll look at next).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  ggplot(aes(x = zoinks)) +\n  geom_histogram(bins = 20, fill = herm)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nThis feels weird to me. Most often, we get 0 or 1, but then there are episodes with more than 10? I'd imagine these are probably movies?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  ggplot(aes(x = zoinks)) +\n  geom_histogram(bins = 10, fill = herm) +\n  facet_wrap(vars(format), scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nWell, so, there are still some TV shows that have a ton of zoinks's. But also our biggest outlier is a movie, which makes sense to me since there's more time for zoinking.\n\nAnd what about our \"if it wasn't for those meddling kids\" data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(unique(scooby_raw$if_it_wasnt_for))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 108\n```\n:::\n:::\n\n\nOk, wow, so that's a lot of different values for \"if it wasn't for...\"\n\nFirst, let's just see how many episodes have the \"if it wasn't for...\" catchphrase\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  mutate(has_catchphrase =  if_else(!is.na(if_it_wasnt_for), TRUE, FALSE)) %>%\n  count(has_catchphrase)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  has_catchphrase     n\n  <lgl>           <int>\n1 FALSE             414\n2 TRUE              189\n```\n:::\n:::\n\n\n\nCool, so, 189 of our 603 episodes have the \"if it wasn't for...\" catchphrase.\n\nAnd now which of these also use the term \"meddling?\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscooby_raw %>%\n  filter(!is.na(if_it_wasnt_for)) %>%\n  mutate(meddling = if_else(str_detect(if_it_wasnt_for, \"meddling\"), TRUE, FALSE)) %>%\n  count(meddling) %>%\n  ggplot(aes(x = n, y = meddling)) +\n  geom_col(fill = herm) +\n  geom_text(aes(label = n, x = n - 1), hjust = 1, color = \"white\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nAlright, so, of the 189 episodes that have the \"if it wasn't for...\" catchphrase, most of those also include the word \"meddling!\"\n\n\nThe last little bit here -- because I'm trying to keep my time to about an hour (again, to test out the feel for if this is a viable approach to streaming or making videos), is going to be to fit a quick linear model predicting the imdb rating of an episode.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidymodels)\n```\n:::\n\n\nLet's just use numeric/logical columns in our model, mostly because preprocessing them is pretty straightforward (although note that this doesn't mean what I'm doing below is anywhere near the best approach). Then let's look at how much missing data we have for each of these columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_df <- scooby_raw %>%\n  select(where(is.numeric) | where(is.logical)) %>%\n  filter(!is.na(imdb))\n\nmiss_df <- mod_df %>%\n  summarize(across(everything(), ~(sum(is.na(.x))/length(.x))))\n\nmiss_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 51\n  index  imdb engagement run_time monster_amount suspects_amount culprit_amount\n  <dbl> <dbl>      <dbl>    <dbl>          <dbl>           <dbl>          <dbl>\n1     0     0          0        0              0               0              0\n# … with 44 more variables: split_up <dbl>, another_mystery <dbl>,\n#   set_a_trap <dbl>, jeepers <dbl>, jinkies <dbl>, my_glasses <dbl>,\n#   just_about_wrapped_up <dbl>, zoinks <dbl>, groovy <dbl>,\n#   scooby_doo_where_are_you <dbl>, rooby_rooby_roo <dbl>, monster_real <dbl>,\n#   caught_fred <dbl>, caught_daphnie <dbl>, caught_velma <dbl>,\n#   caught_shaggy <dbl>, caught_scooby <dbl>, captured_fred <dbl>,\n#   captured_daphnie <dbl>, captured_velma <dbl>, captured_shaggy <dbl>, …\n```\n:::\n:::\n\n\n\nSo, some of these columns have a ton of missing data. Just to keep moving forward on this, I'm going to chuck any columns with more than 20% missing data, then median impute cases with missing data in the remaining columns (which we'll do in the recipes step below).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeep_vars <- miss_df %>%\n  pivot_longer(cols = everything(),\n               names_to = \"nms\",\n               values_to = \"vals\") %>%\n  filter(vals < .2) %>%\n  pull(1)\n\nmod_df <- mod_df %>%\n  select(all_of(keep_vars)) %>%\n  mutate(across(where(is.logical), as.numeric))\n```\n:::\n\n\n\nNow we'll set up some bootstrap resamples. I'm using bootstrap resamples here rather than k-fold because it's a relatively small dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0408)\nbooties <- bootstraps(mod_df, times = 10)\n```\n:::\n\n\n\nAnd then let's define some very basic preprocessing using a recipe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrec <- recipe(imdb ~ ., data = mod_df) %>%\n  step_impute_median(all_numeric_predictors()) %>%\n  step_normalize(all_numeric_predictors()) \n```\n:::\n\n\n\nAnd let's do a lasso regression, just using a small and kinda of arbitrary penalty value (we could tune this, but I'm not going to).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_spec <- linear_reg(mixture = 1, penalty = .001) %>%\n  set_engine(\"glmnet\")\n\n#combining everything into a workflow\nlasso_wf <- workflow() %>%\n  add_recipe(rec) %>%\n  add_model(lasso_spec)\n```\n:::\n\n\n\nAnd now let's fit!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_res <- fit_resamples(\n  lasso_wf,\n  resamples = booties\n)\n```\n:::\n\n\n\nThe main reason for fitting on these resamples is to check our model performance, so let's do that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect_metrics(lasso_res)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   0.626    10  0.0104 Preprocessor1_Model1\n2 rsq     standard   0.280    10  0.0165 Preprocessor1_Model1\n```\n:::\n:::\n\n\n\nOur R-squared is .29, which isn't great, but it's also not terrible considering we really didn't put much effort into our preprocessing here, and we discarded a bunch of data.\n\nLet's fit one final time on the full dataset to look at the importance of our predictor variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprepped_df <- rec %>%\n  prep() %>%\n  bake(new_data = NULL)\n\nmod_fit <- lasso_spec %>%\n  fit(imdb ~ ., data = prepped_df)\n```\n:::\n\n\n\nAnd then finally we can look at our coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_fit %>%\n  tidy() %>%\n  filter(term != \"(Intercept)\") %>%\n  arrange(desc(abs(estimate))) %>%\n  ggplot(aes(x = estimate, y = fct_reorder(term, abs(estimate)), fill = estimate >= 0)) +\n  geom_col() +\n  labs(\n    y = NULL\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\nAnd there we go. That was a bit more than an hour, but it was worth it to get to a reasonable stopping point!\n\n  \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}