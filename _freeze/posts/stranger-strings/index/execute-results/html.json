{
  "hash": "3d7f27642825a20b6e79a93c9fd506f3",
  "result": {
    "markdown": "---\ntitle: Stranger Strings\ndescription: |\n  Tokenizing and counting Stranger Things dialogue using Julia\ndate: '2022-10-26'\nformat:\n  html:\n    code-fold: false\ncategories:\n  - Julia\n  - Text Analysis\n  - TidyTuesday\n---\n\nIn my quest to continue learning how to do things in Julia, I wanted to play around with last week's [#TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-10-18), which was the dialogue from every episode of Stranger Things. In data-analysis-dabbling in Julia so far, I've more or less avoided strings. This has mostly been because I've been focusing on numerical topics (like maximum likelihood estimation), but also because working with strings can be a pain. That said, it felt like time to explore strings in Julia, and this dataset provided a good opportunity to practice.\n\nThe goal of this analysis is going to be do something fairly straightforward -- I'm going to count the most-frequently used words in the series. But this will require learning some fundamental tools like tokenizing, pivoting/reshaping data, and cleaning text data, among others.\n\nAs always, the point of this is to work through my own learning process. I'm certainly not claiming to be an expert, and if you are an expert and can recommend better approaches, I'd love to hear them!\n\nSo let's get to it.\n\n# Setup and Examine Data\n\nFirst, let's load the packages we'll use and read the data in:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing CSV #for reading CSVs\nusing DataFrames #dataframe utilities\nusing Chain #chain macro, similar to R's pipe\nusing Languages #for stopwords\nusing CairoMakie #plotting\nusing Statistics #for median\n\nst_things_dialogue = CSV.read(download(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-10-18/stranger_things_all_dialogue.csv\"), DataFrame);\n```\n:::\n\n\nAnd then we can look at the size of the dataframe:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nsize(st_things_dialogue)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(32519, 8)\n```\n:::\n:::\n\n\nAs well as see the first few rows:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\nfirst(st_things_dialogue, 3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div class=\"data-frame\"><p>3 rows × 8 columns (omitted printing of 1 columns)</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>raw_text</th><th>stage_direction</th><th>dialogue</th><th>start_time</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"String\">String</th><th title=\"Union{Missing, String}\">String?</th><th title=\"Union{Missing, String}\">String?</th><th title=\"Dates.Time\">Time</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>1</td><td>[crickets chirping]</td><td>[crickets chirping]</td><td><em>missing</em></td><td>00:00:07</td></tr><tr><th>2</th><td>1</td><td>1</td><td>2</td><td>[alarm blaring]</td><td>[alarm blaring]</td><td><em>missing</em></td><td>00:00:49</td></tr><tr><th>3</th><td>1</td><td>1</td><td>3</td><td>[panting]</td><td>[panting]</td><td><em>missing</em></td><td>00:00:52</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nSo we can see that dialogue might be `missing` if the line is just stage directions. For our purposes here, let's just use the lines with dialogue. To do this, we can use the `dropmissing()` function and then pass in the Dataframe and the column we want to only keep complete cases of, which is `:dialogue` in this case. Note that Julia uses `:` to denote symbols.\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\ndialogue_complete = dropmissing(st_things_dialogue, :dialogue)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div class=\"data-frame\"><p>26,435 rows × 8 columns (omitted printing of 4 columns)</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>raw_text</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"String\">String</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>[Mike] Something is coming. Something hungry for blood.</td></tr><tr><th>2</th><td>1</td><td>1</td><td>10</td><td>A shadow grows on the wall behind you, swallowing you in darkness.</td></tr><tr><th>3</th><td>1</td><td>1</td><td>11</td><td>-It is almost here. -What is it?</td></tr><tr><th>4</th><td>1</td><td>1</td><td>12</td><td>What if it&apos;s the Demogorgon?</td></tr><tr><th>5</th><td>1</td><td>1</td><td>13</td><td>Oh, Jesus, we&apos;re so screwed if it&apos;s the Demogorgon.</td></tr><tr><th>6</th><td>1</td><td>1</td><td>14</td><td>It&apos;s not the Demogorgon.</td></tr><tr><th>7</th><td>1</td><td>1</td><td>15</td><td>An army of troglodytes charge into the chamber!</td></tr><tr><th>8</th><td>1</td><td>1</td><td>16</td><td>-Troglodytes? -Told ya. [chuckling]</td></tr><tr><th>9</th><td>1</td><td>1</td><td>17</td><td>-[snorts] -[all chuckling]</td></tr><tr><th>10</th><td>1</td><td>1</td><td>18</td><td>[softly] Wait a minute.</td></tr><tr><th>11</th><td>1</td><td>1</td><td>19</td><td>Did you hear that?</td></tr><tr><th>12</th><td>1</td><td>1</td><td>20</td><td>That... that sound?</td></tr><tr><th>13</th><td>1</td><td>1</td><td>21</td><td>Boom... boom...</td></tr><tr><th>14</th><td>1</td><td>1</td><td>22</td><td>-[yells] Boom! -[slams table]</td></tr><tr><th>15</th><td>1</td><td>1</td><td>23</td><td>That didn&apos;t come from the troglodytes. No, that...</td></tr><tr><th>16</th><td>1</td><td>1</td><td>24</td><td>That came from something else.</td></tr><tr><th>17</th><td>1</td><td>1</td><td>25</td><td>-The Demogorgon! -[all groaning]</td></tr><tr><th>18</th><td>1</td><td>1</td><td>26</td><td>-We&apos;re in deep shit. -Will, your action!</td></tr><tr><th>19</th><td>1</td><td>1</td><td>27</td><td>-I don&apos;t know! -Fireball him!</td></tr><tr><th>20</th><td>1</td><td>1</td><td>28</td><td>I&apos;d have to roll a 13 or higher!</td></tr><tr><th>21</th><td>1</td><td>1</td><td>29</td><td>Too risky. Cast a protection spell.</td></tr><tr><th>22</th><td>1</td><td>1</td><td>30</td><td>-Don&apos;t be a pussy. Fireball him! -Cast Protection.</td></tr><tr><th>23</th><td>1</td><td>1</td><td>31</td><td>The Demogorgon is tired of your silly human bickering!</td></tr><tr><th>24</th><td>1</td><td>1</td><td>32</td><td>It stomps towards you.</td></tr><tr><th>25</th><td>1</td><td>1</td><td>33</td><td>-Boom! -Fireball him!</td></tr><tr><th>26</th><td>1</td><td>1</td><td>34</td><td>-Another stomp, boom! -Cast Protection.</td></tr><tr><th>27</th><td>1</td><td>1</td><td>35</td><td>-He roars in anger! -[all clamoring]</td></tr><tr><th>28</th><td>1</td><td>1</td><td>36</td><td>-Fireball! -[die clattering]</td></tr><tr><th>29</th><td>1</td><td>1</td><td>37</td><td>-Oh, shit! -[Lucas] Where&apos;d it go?</td></tr><tr><th>30</th><td>1</td><td>1</td><td>38</td><td>[Lucas] Where is it? [Will] I don&apos;t know!</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n# Reshape Data\n\nCool, so this will get us just rows that actually have dialogue. But what we can see is that each row is a *line* of dialogue, whereas we actually want to tokenize this so that each row is a word.\n\nTo do this, we can use the `split` function, which lets us split a string at whatever delimiter we provide. In this case, that's a space. For example:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nsplit(\"a man a plan a canal panama\", \" \")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n7-element Vector{SubString{String}}:\n \"a\"\n \"man\"\n \"a\"\n \"plan\"\n \"a\"\n \"canal\"\n \"panama\"\n```\n:::\n:::\n\n\nOr, using our actual data:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nsplit(dialogue_complete.dialogue[1], \" \")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n7-element Vector{SubString{String}}:\n \"Something\"\n \"is\"\n \"coming.\"\n \"Something\"\n \"hungry\"\n \"for\"\n \"blood.\"\n```\n:::\n:::\n\n\nIt's worth noting that, by default, `split()` will split on spaces, so we can just call the default function without the final argument as well:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nsplit(dialogue_complete.dialogue[1])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n7-element Vector{SubString{String}}:\n \"Something\"\n \"is\"\n \"coming.\"\n \"Something\"\n \"hungry\"\n \"for\"\n \"blood.\"\n```\n:::\n:::\n\n\nSo this gives us the first step of what we want to do in tokenizing the dialogue.\n\nLet's start putting this into a `chain`, which is similar to R's pipe concept. And apparently there are several different chains/pipes in Julia, but the `Chain.jl` package seems reasonable to me so let's just use that one.\n\nWe can begin a chain operation with the `@chain` macro, then pass the dataframe name and a `begin` keyword. We then do all of our operations, then pass the `end` keyword. Like `tidyverse` functions in R, most of Julia's `DataFrame` functions expect a dataframe as the first argument, which makes them work well with chains.\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\ndf_split = @chain dialogue_complete begin\n    select(\n        :season,\n        :episode,\n        :line,\n        :dialogue => ByRow(split) => :dialogue_split\n    )\n    end\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div class=\"data-frame\"><p>26,435 rows × 4 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>dialogue_split</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Vector{SubString{String}}\">Array…</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>[&quot;Something&quot;, &quot;is&quot;, &quot;coming.&quot;, &quot;Something&quot;, &quot;hungry&quot;, &quot;for&quot;, &quot;blood.&quot;]</td></tr><tr><th>2</th><td>1</td><td>1</td><td>10</td><td>[&quot;A&quot;, &quot;shadow&quot;, &quot;grows&quot;, &quot;on&quot;, &quot;the&quot;, &quot;wall&quot;, &quot;behind&quot;, &quot;you,&quot;, &quot;swallowing&quot;, &quot;you&quot;, &quot;in&quot;, &quot;darkness.&quot;]</td></tr><tr><th>3</th><td>1</td><td>1</td><td>11</td><td>[&quot;It&quot;, &quot;is&quot;, &quot;almost&quot;, &quot;here.&quot;, &quot;What&quot;, &quot;is&quot;, &quot;it?&quot;]</td></tr><tr><th>4</th><td>1</td><td>1</td><td>12</td><td>[&quot;What&quot;, &quot;if&quot;, &quot;it&apos;s&quot;, &quot;the&quot;, &quot;Demogorgon?&quot;]</td></tr><tr><th>5</th><td>1</td><td>1</td><td>13</td><td>[&quot;Oh,&quot;, &quot;Jesus,&quot;, &quot;we&apos;re&quot;, &quot;so&quot;, &quot;screwed&quot;, &quot;if&quot;, &quot;it&apos;s&quot;, &quot;the&quot;, &quot;Demogorgon.&quot;]</td></tr><tr><th>6</th><td>1</td><td>1</td><td>14</td><td>[&quot;It&apos;s&quot;, &quot;not&quot;, &quot;the&quot;, &quot;Demogorgon.&quot;]</td></tr><tr><th>7</th><td>1</td><td>1</td><td>15</td><td>[&quot;An&quot;, &quot;army&quot;, &quot;of&quot;, &quot;troglodytes&quot;, &quot;charge&quot;, &quot;into&quot;, &quot;the&quot;, &quot;chamber!&quot;]</td></tr><tr><th>8</th><td>1</td><td>1</td><td>16</td><td>[&quot;Troglodytes?&quot;, &quot;Told&quot;, &quot;ya.&quot;]</td></tr><tr><th>9</th><td>1</td><td>1</td><td>17</td><td>[]</td></tr><tr><th>10</th><td>1</td><td>1</td><td>18</td><td>[&quot;Wait&quot;, &quot;a&quot;, &quot;minute.&quot;]</td></tr><tr><th>11</th><td>1</td><td>1</td><td>19</td><td>[&quot;Did&quot;, &quot;you&quot;, &quot;hear&quot;, &quot;that?&quot;]</td></tr><tr><th>12</th><td>1</td><td>1</td><td>20</td><td>[&quot;That...&quot;, &quot;that&quot;, &quot;sound?&quot;]</td></tr><tr><th>13</th><td>1</td><td>1</td><td>21</td><td>[&quot;Boom...&quot;, &quot;boom...&quot;]</td></tr><tr><th>14</th><td>1</td><td>1</td><td>22</td><td>[&quot;Boom!&quot;]</td></tr><tr><th>15</th><td>1</td><td>1</td><td>23</td><td>[&quot;That&quot;, &quot;didn&apos;t&quot;, &quot;come&quot;, &quot;from&quot;, &quot;the&quot;, &quot;troglodytes.&quot;, &quot;No,&quot;, &quot;that...&quot;]</td></tr><tr><th>16</th><td>1</td><td>1</td><td>24</td><td>[&quot;That&quot;, &quot;came&quot;, &quot;from&quot;, &quot;something&quot;, &quot;else.&quot;]</td></tr><tr><th>17</th><td>1</td><td>1</td><td>25</td><td>[&quot;The&quot;, &quot;Demogorgon!&quot;]</td></tr><tr><th>18</th><td>1</td><td>1</td><td>26</td><td>[&quot;We&apos;re&quot;, &quot;in&quot;, &quot;deep&quot;, &quot;shit.&quot;, &quot;Will,&quot;, &quot;your&quot;, &quot;action!&quot;]</td></tr><tr><th>19</th><td>1</td><td>1</td><td>27</td><td>[&quot;I&quot;, &quot;don&apos;t&quot;, &quot;know!&quot;, &quot;Fireball&quot;, &quot;him!&quot;]</td></tr><tr><th>20</th><td>1</td><td>1</td><td>28</td><td>[&quot;I&apos;d&quot;, &quot;have&quot;, &quot;to&quot;, &quot;roll&quot;, &quot;a&quot;, &quot;13&quot;, &quot;or&quot;, &quot;higher!&quot;]</td></tr><tr><th>21</th><td>1</td><td>1</td><td>29</td><td>[&quot;Too&quot;, &quot;risky.&quot;, &quot;Cast&quot;, &quot;a&quot;, &quot;protection&quot;, &quot;spell.&quot;]</td></tr><tr><th>22</th><td>1</td><td>1</td><td>30</td><td>[&quot;Don&apos;t&quot;, &quot;be&quot;, &quot;a&quot;, &quot;pussy.&quot;, &quot;Fireball&quot;, &quot;him!&quot;, &quot;Cast&quot;, &quot;Protection.&quot;]</td></tr><tr><th>23</th><td>1</td><td>1</td><td>31</td><td>[&quot;The&quot;, &quot;Demogorgon&quot;, &quot;is&quot;, &quot;tired&quot;, &quot;of&quot;, &quot;your&quot;, &quot;silly&quot;, &quot;human&quot;, &quot;bickering!&quot;]</td></tr><tr><th>24</th><td>1</td><td>1</td><td>32</td><td>[&quot;It&quot;, &quot;stomps&quot;, &quot;towards&quot;, &quot;you.&quot;]</td></tr><tr><th>25</th><td>1</td><td>1</td><td>33</td><td>[&quot;Boom!&quot;, &quot;Fireball&quot;, &quot;him!&quot;]</td></tr><tr><th>26</th><td>1</td><td>1</td><td>34</td><td>[&quot;Another&quot;, &quot;stomp,&quot;, &quot;boom!&quot;, &quot;Cast&quot;, &quot;Protection.&quot;]</td></tr><tr><th>27</th><td>1</td><td>1</td><td>35</td><td>[&quot;He&quot;, &quot;roars&quot;, &quot;in&quot;, &quot;anger!&quot;]</td></tr><tr><th>28</th><td>1</td><td>1</td><td>36</td><td>[&quot;Fireball!&quot;]</td></tr><tr><th>29</th><td>1</td><td>1</td><td>37</td><td>[&quot;Oh,&quot;, &quot;shit!&quot;, &quot;Where&apos;d&quot;, &quot;it&quot;, &quot;go?&quot;]</td></tr><tr><th>30</th><td>1</td><td>1</td><td>38</td><td>[&quot;Where&quot;, &quot;is&quot;, &quot;it?&quot;, &quot;I&quot;, &quot;don&apos;t&quot;, &quot;know!&quot;]</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nTechnically we don't *need* to chain anything above since we're just doing one operation (`select()`) right now, but we'll add more soon.\n\nOne thing you might notice in the final line within `select()` is Julia's notation for \"doing things\" is `input_col => function => output_col`. In the case above, we're supplying an anonymous function (which is that x -> fun(x, ...)) syntax, and wrapping that in a special `ByRow()` function that facilitates broadcasting in dataframe operations.\n\nAll that said, the above doesn't quite give us what we want if we look at the first two rows of output:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nfirst(df_split, 2)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div class=\"data-frame\"><p>2 rows × 4 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>dialogue_split</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Vector{SubString{String}}\">Array…</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>[&quot;Something&quot;, &quot;is&quot;, &quot;coming.&quot;, &quot;Something&quot;, &quot;hungry&quot;, &quot;for&quot;, &quot;blood.&quot;]</td></tr><tr><th>2</th><td>1</td><td>1</td><td>10</td><td>[&quot;A&quot;, &quot;shadow&quot;, &quot;grows&quot;, &quot;on&quot;, &quot;the&quot;, &quot;wall&quot;, &quot;behind&quot;, &quot;you,&quot;, &quot;swallowing&quot;, &quot;you&quot;, &quot;in&quot;, &quot;darkness.&quot;]</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nOur `dialogue_split` column is a vector of vectors. To get around this, we want to flatten the column so that each row contains a single word. The nice thing about our chain operation above is that we can just plunk the `flatten()` function right on the end to do this:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ndf_split = @chain dialogue_complete begin\n    select(\n        :season,\n        :episode,\n        :line,\n        :dialogue => ByRow(split) => :dialogue_split\n    )\n    flatten(:dialogue_split)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div class=\"data-frame\"><p>145,243 rows × 4 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>dialogue_split</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"SubString{String}\">SubStrin…</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>Something</td></tr><tr><th>2</th><td>1</td><td>1</td><td>9</td><td>is</td></tr><tr><th>3</th><td>1</td><td>1</td><td>9</td><td>coming.</td></tr><tr><th>4</th><td>1</td><td>1</td><td>9</td><td>Something</td></tr><tr><th>5</th><td>1</td><td>1</td><td>9</td><td>hungry</td></tr><tr><th>6</th><td>1</td><td>1</td><td>9</td><td>for</td></tr><tr><th>7</th><td>1</td><td>1</td><td>9</td><td>blood.</td></tr><tr><th>8</th><td>1</td><td>1</td><td>10</td><td>A</td></tr><tr><th>9</th><td>1</td><td>1</td><td>10</td><td>shadow</td></tr><tr><th>10</th><td>1</td><td>1</td><td>10</td><td>grows</td></tr><tr><th>11</th><td>1</td><td>1</td><td>10</td><td>on</td></tr><tr><th>12</th><td>1</td><td>1</td><td>10</td><td>the</td></tr><tr><th>13</th><td>1</td><td>1</td><td>10</td><td>wall</td></tr><tr><th>14</th><td>1</td><td>1</td><td>10</td><td>behind</td></tr><tr><th>15</th><td>1</td><td>1</td><td>10</td><td>you,</td></tr><tr><th>16</th><td>1</td><td>1</td><td>10</td><td>swallowing</td></tr><tr><th>17</th><td>1</td><td>1</td><td>10</td><td>you</td></tr><tr><th>18</th><td>1</td><td>1</td><td>10</td><td>in</td></tr><tr><th>19</th><td>1</td><td>1</td><td>10</td><td>darkness.</td></tr><tr><th>20</th><td>1</td><td>1</td><td>11</td><td>It</td></tr><tr><th>21</th><td>1</td><td>1</td><td>11</td><td>is</td></tr><tr><th>22</th><td>1</td><td>1</td><td>11</td><td>almost</td></tr><tr><th>23</th><td>1</td><td>1</td><td>11</td><td>here.</td></tr><tr><th>24</th><td>1</td><td>1</td><td>11</td><td>What</td></tr><tr><th>25</th><td>1</td><td>1</td><td>11</td><td>is</td></tr><tr><th>26</th><td>1</td><td>1</td><td>11</td><td>it?</td></tr><tr><th>27</th><td>1</td><td>1</td><td>12</td><td>What</td></tr><tr><th>28</th><td>1</td><td>1</td><td>12</td><td>if</td></tr><tr><th>29</th><td>1</td><td>1</td><td>12</td><td>it&apos;s</td></tr><tr><th>30</th><td>1</td><td>1</td><td>12</td><td>the</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nBetter! Now let's check out the first 10 elements of our dialogue split column:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\nshow(first(df_split.:dialogue_split, 10))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubString{String}[\"Something\", \"is\", \"coming.\", \"Something\", \"hungry\", \"for\", \"blood.\", \"A\", \"shadow\", \"grows\"]\n```\n:::\n:::\n\n\n# Clean Text\n\nSo, it's not ideal that we have punctuation in here. We don't want, for instance \"blood\" to be considered a different word than \"blood.\" when we count words later. Same deal for uppercase and lowercase letters -- we want \"something\" to be the same as \"Something\". So we need to strip punctuation and lowercase everything.\n\nFirst, we can write a small little function to strip punctuation.\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nfunction strip_punc(x)\n    strip(x, [',', ';', '.', '?', '!'])\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nstrip_punc (generic function with 1 method)\n```\n:::\n:::\n\n\nAnd Julia already has a `lowercase()` function built in. Now, let's jam these on the end of the chain we already have:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\ndf_split = @chain dialogue_complete begin\n    select(\n        :season,\n        :episode,\n        :line,\n        :dialogue => ByRow(split) => :dialogue_split\n    )\n    flatten(:dialogue_split)\n    transform(:dialogue_split => ByRow(lowercase) => :dialogue_split)\n    transform(:dialogue_split => ByRow(strip_punc) => :dialogue_stripped)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div class=\"data-frame\"><p>145,243 rows × 5 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>dialogue_split</th><th>dialogue_stripped</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"String\">String</th><th title=\"SubString{String}\">SubStrin…</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>something</td><td>something</td></tr><tr><th>2</th><td>1</td><td>1</td><td>9</td><td>is</td><td>is</td></tr><tr><th>3</th><td>1</td><td>1</td><td>9</td><td>coming.</td><td>coming</td></tr><tr><th>4</th><td>1</td><td>1</td><td>9</td><td>something</td><td>something</td></tr><tr><th>5</th><td>1</td><td>1</td><td>9</td><td>hungry</td><td>hungry</td></tr><tr><th>6</th><td>1</td><td>1</td><td>9</td><td>for</td><td>for</td></tr><tr><th>7</th><td>1</td><td>1</td><td>9</td><td>blood.</td><td>blood</td></tr><tr><th>8</th><td>1</td><td>1</td><td>10</td><td>a</td><td>a</td></tr><tr><th>9</th><td>1</td><td>1</td><td>10</td><td>shadow</td><td>shadow</td></tr><tr><th>10</th><td>1</td><td>1</td><td>10</td><td>grows</td><td>grows</td></tr><tr><th>11</th><td>1</td><td>1</td><td>10</td><td>on</td><td>on</td></tr><tr><th>12</th><td>1</td><td>1</td><td>10</td><td>the</td><td>the</td></tr><tr><th>13</th><td>1</td><td>1</td><td>10</td><td>wall</td><td>wall</td></tr><tr><th>14</th><td>1</td><td>1</td><td>10</td><td>behind</td><td>behind</td></tr><tr><th>15</th><td>1</td><td>1</td><td>10</td><td>you,</td><td>you</td></tr><tr><th>16</th><td>1</td><td>1</td><td>10</td><td>swallowing</td><td>swallowing</td></tr><tr><th>17</th><td>1</td><td>1</td><td>10</td><td>you</td><td>you</td></tr><tr><th>18</th><td>1</td><td>1</td><td>10</td><td>in</td><td>in</td></tr><tr><th>19</th><td>1</td><td>1</td><td>10</td><td>darkness.</td><td>darkness</td></tr><tr><th>20</th><td>1</td><td>1</td><td>11</td><td>it</td><td>it</td></tr><tr><th>21</th><td>1</td><td>1</td><td>11</td><td>is</td><td>is</td></tr><tr><th>22</th><td>1</td><td>1</td><td>11</td><td>almost</td><td>almost</td></tr><tr><th>23</th><td>1</td><td>1</td><td>11</td><td>here.</td><td>here</td></tr><tr><th>24</th><td>1</td><td>1</td><td>11</td><td>what</td><td>what</td></tr><tr><th>25</th><td>1</td><td>1</td><td>11</td><td>is</td><td>is</td></tr><tr><th>26</th><td>1</td><td>1</td><td>11</td><td>it?</td><td>it</td></tr><tr><th>27</th><td>1</td><td>1</td><td>12</td><td>what</td><td>what</td></tr><tr><th>28</th><td>1</td><td>1</td><td>12</td><td>if</td><td>if</td></tr><tr><th>29</th><td>1</td><td>1</td><td>12</td><td>it&apos;s</td><td>it&apos;s</td></tr><tr><th>30</th><td>1</td><td>1</td><td>12</td><td>the</td><td>the</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nConfirming that this worked:\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nshow(df_split.:dialogue_stripped[1:10])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSubString{String}[\"something\", \"is\", \"coming\", \"something\", \"hungry\", \"for\", \"blood\", \"a\", \"shadow\", \"grows\"]\n```\n:::\n:::\n\n\nSplendid.\n\n# Remove Stop Words\n\nThe next step is to get rid of stop words, because we don't really care about counting those. There's a list of stopwords in the `Languages.jl` package that we'll use\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nstops = stopwords(Languages.English())\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n488-element Vector{String}:\n \"a\"\n \"about\"\n \"above\"\n \"across\"\n \"after\"\n \"again\"\n \"against\"\n \"all\"\n \"almost\"\n \"alone\"\n \"along\"\n \"already\"\n \"also\"\n ⋮\n \"you'd\"\n \"you'll\"\n \"young\"\n \"younger\"\n \"youngest\"\n \"your\"\n \"you're\"\n \"yours\"\n \"yourself\"\n \"yourselves\"\n \"you've\"\n \"z\"\n```\n:::\n:::\n\n\nSwell. Now that we have this, we can subset (filter in R terms) our dataset to include only rows with words not in the list of stop words.\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\ndialogue_no_stops = subset(\n    df_split,\n    :dialogue_stripped => x -> .!in.(x, Ref(stops))\n    )\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div class=\"data-frame\"><p>50,812 rows × 5 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>season</th><th>episode</th><th>line</th><th>dialogue_split</th><th>dialogue_stripped</th></tr><tr><th></th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"Int64\">Int64</th><th title=\"String\">String</th><th title=\"SubString{String}\">SubStrin…</th></tr></thead><tbody><tr><th>1</th><td>1</td><td>1</td><td>9</td><td>coming.</td><td>coming</td></tr><tr><th>2</th><td>1</td><td>1</td><td>9</td><td>hungry</td><td>hungry</td></tr><tr><th>3</th><td>1</td><td>1</td><td>9</td><td>blood.</td><td>blood</td></tr><tr><th>4</th><td>1</td><td>1</td><td>10</td><td>shadow</td><td>shadow</td></tr><tr><th>5</th><td>1</td><td>1</td><td>10</td><td>grows</td><td>grows</td></tr><tr><th>6</th><td>1</td><td>1</td><td>10</td><td>wall</td><td>wall</td></tr><tr><th>7</th><td>1</td><td>1</td><td>10</td><td>swallowing</td><td>swallowing</td></tr><tr><th>8</th><td>1</td><td>1</td><td>10</td><td>darkness.</td><td>darkness</td></tr><tr><th>9</th><td>1</td><td>1</td><td>12</td><td>demogorgon?</td><td>demogorgon</td></tr><tr><th>10</th><td>1</td><td>1</td><td>13</td><td>oh,</td><td>oh</td></tr><tr><th>11</th><td>1</td><td>1</td><td>13</td><td>jesus,</td><td>jesus</td></tr><tr><th>12</th><td>1</td><td>1</td><td>13</td><td>screwed</td><td>screwed</td></tr><tr><th>13</th><td>1</td><td>1</td><td>13</td><td>demogorgon.</td><td>demogorgon</td></tr><tr><th>14</th><td>1</td><td>1</td><td>14</td><td>demogorgon.</td><td>demogorgon</td></tr><tr><th>15</th><td>1</td><td>1</td><td>15</td><td>army</td><td>army</td></tr><tr><th>16</th><td>1</td><td>1</td><td>15</td><td>troglodytes</td><td>troglodytes</td></tr><tr><th>17</th><td>1</td><td>1</td><td>15</td><td>charge</td><td>charge</td></tr><tr><th>18</th><td>1</td><td>1</td><td>15</td><td>chamber!</td><td>chamber</td></tr><tr><th>19</th><td>1</td><td>1</td><td>16</td><td>troglodytes?</td><td>troglodytes</td></tr><tr><th>20</th><td>1</td><td>1</td><td>16</td><td>told</td><td>told</td></tr><tr><th>21</th><td>1</td><td>1</td><td>16</td><td>ya.</td><td>ya</td></tr><tr><th>22</th><td>1</td><td>1</td><td>18</td><td>wait</td><td>wait</td></tr><tr><th>23</th><td>1</td><td>1</td><td>18</td><td>minute.</td><td>minute</td></tr><tr><th>24</th><td>1</td><td>1</td><td>19</td><td>hear</td><td>hear</td></tr><tr><th>25</th><td>1</td><td>1</td><td>20</td><td>sound?</td><td>sound</td></tr><tr><th>26</th><td>1</td><td>1</td><td>21</td><td>boom...</td><td>boom</td></tr><tr><th>27</th><td>1</td><td>1</td><td>21</td><td>boom...</td><td>boom</td></tr><tr><th>28</th><td>1</td><td>1</td><td>22</td><td>boom!</td><td>boom</td></tr><tr><th>29</th><td>1</td><td>1</td><td>23</td><td>troglodytes.</td><td>troglodytes</td></tr><tr><th>30</th><td>1</td><td>1</td><td>24</td><td>else.</td><td>else</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td><td>&vellip;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nIf you're not familiar with Julia, the `.` is a way to broadcast/vectorize operations, which mostly aren't vectorized by default. And to be completely honest, I'm not sure why I need to wrap our stopwords in `Ref()`, but the internet says I do and I assume this is some Julia equivalent of, like, tidyeval that I haven't gotten around to understanding yet. But regardless, this does what we want!\n\n# Getting the Top 20 Words\n\nWe're almost there, fam. We've got a dataset in the format we want it in, and we've done some light cleaning. Now, let's count how often each word is used and select the top 20 most common. Again, we're going to chain some operations together.\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\ntop_20 = @chain dialogue_no_stops begin\n    groupby(:dialogue_stripped)\n    combine(nrow => :count)\n    sort(:count, rev = true)\n    first(20)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div class=\"data-frame\"><p>20 rows × 2 columns</p><table class=\"data-frame\"><thead><tr><th></th><th>dialogue_stripped</th><th>count</th></tr><tr><th></th><th title=\"SubString{String}\">SubStrin…</th><th title=\"Int64\">Int64</th></tr></thead><tbody><tr><th>1</th><td>♪</td><td>1386</td></tr><tr><th>2</th><td>yeah</td><td>1106</td></tr><tr><th>3</th><td>okay</td><td>960</td></tr><tr><th>4</th><td>oh</td><td>670</td></tr><tr><th>5</th><td>hey</td><td>631</td></tr><tr><th>6</th><td>shit</td><td>456</td></tr><tr><th>7</th><td>gonna</td><td>427</td></tr><tr><th>8</th><td>uh</td><td>396</td></tr><tr><th>9</th><td>mean</td><td>310</td></tr><tr><th>10</th><td>time</td><td>284</td></tr><tr><th>11</th><td>sorry</td><td>281</td></tr><tr><th>12</th><td>look</td><td>242</td></tr><tr><th>13</th><td>tell</td><td>240</td></tr><tr><th>14</th><td>mike</td><td>234</td></tr><tr><th>15</th><td>stop</td><td>227</td></tr><tr><th>16</th><td>maybe</td><td>225</td></tr><tr><th>17</th><td>please</td><td>224</td></tr><tr><th>18</th><td>max</td><td>213</td></tr><tr><th>19</th><td>god</td><td>211</td></tr><tr><th>20</th><td>little</td><td>211</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nI'm actually not going to explain the above because I think it's pretty intuitive if you've been following along so far and are familiar with either R or Python functions (the function names here are pretty descriptive, I think).\n\n# Plotting\n\nOk, so, as much as I like Julia so far, plotting does feel difficult. I've mostly used `Makie` and its counterparts, and I think I'm almost starting to get a handle on them, but they definitely don't feel as intuitive to me as, say, `ggplot2`.\n\nFull transparency -- making this little plot took me more time than I wanted it to, and it's entirely due to labeling the y-axis ticks. So, uh, here's the code to make the plot, and just know that I don't fully understand why some options accept vectors while others want tuples.\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nlbls = \"Rank \" .* reverse(string.(1:20))\n\nbarplot(\n    1:nrow(top_20),\n    reverse(top_20.count),\n    direction = :x,\n    bar_labels = reverse(top_20.:dialogue_stripped),\n    flip_labels_at = median(top_20.count),\n    axis = (\n        yticks = (1:20, lbls),\n        title = \"Most Common Words in Stranger Things\",\n        xlabel = \"Times Said\"\n    ),\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n![](index_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\nEt voila -- we've taken a dataframe with dialogue, tokenized it, cleaned it a little bit, and found the top 20 most common words. We could modify our list of stop words a little if we wanted to get rid of things like \"oh\", \"okay\", \"uh\", and whatnot, but I'm not going to bother with that here. I hope you learned as much from reading this as I did from writing it!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}