{
  "hash": "0608ea5d02e297c7f08eee96a428caf5",
  "result": {
    "markdown": "---\ntitle: \"Unconsciousness in the Xmen\"\ndescription: |\n  Practicing Poisson regression using Xmen data\ndate: \"2020-05-06\"\ncategories: [R, Tutorial, glm, Poisson Regression, stats]\n---\n\n\n\nA part of me has always wanted to get into comic books. I think it would be a really good fit for me -- I'm definitely a nerd. I play video games, I read fantasy novels, I code/do data science for fun. Comic books should be right up my alley. But for whatever reason, I've never taken the plunge. Maybe it's a time commitment thing. Maybe I know I'll like them too much. Maybe it's too daunting to figure out how to start. Regardless, even thought I'm not *into* comic books, they are intriguing to me, and the X-Men particularly so, which is why I wanted to take a little bit of time to analyze this X-men data promoted by the [#tidytuesday](https://github.com/rfordatascience/tidytuesday/blob/master/README.md) project.\n\nThe other main purpose of this blog post is to toy around with running a Poisson regression. A few months ago, I saw a [post](https://www.tidyverse.org/blog/2020/04/parsnip-adjacent/) about how the tidymodels framework had some new \"parsnip-adjacent\" packages, with one being [`{poissonreg}`](https://cran.r-project.org/web/packages/poissonreg/index.html) which fits -- you guessed it -- Poisson regressions. I haven't had much reason to use Poisson regression in any of my previous work or in datasets I've toyed around with, but this X-men dataset seems like a good excuse to try it out. So, onward and upward!\n\n\n## Setup\n\nFirst, I'll load some packages, set some miscellaneous options, and import the data. This data comes from the [Claremont Run](http://www.claremontrun.com/) project, which mines data from Chris Claremont's run (1975-1991) writing the X-men comics. To learn more about the project, you can visit the website. There are several datasets available, but for this analysis, I'm going to use data from the characters dataset, the character_visualization dataset, and the locations dataset. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(hrbrthemes)\nlibrary(gameofthrones)\nlibrary(vip)\n\ntheme_set(theme_ipsum())\n\nlann <- got(1, option = \"Lannister\")\n\ncharacters <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-30/characters.csv')\nlocations <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-30/locations.csv')\ncharacter_visualization <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-06-30/character_visualization.csv')\n```\n:::\n\n\n## Exploring the Data\n\nLet's first look at the characters dataset. In this dataset, each row corresponds to a character in an issue, and each column corresponds to actions or events relevant to that character. Here's a glimpse of that data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharacters %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,209\nColumns: 34\n$ issue                                         <dbl> 97, 97, 97, 97, 97, 97, …\n$ character                                     <chr> \"Professor X\", \"Wolverin…\n$ rendered_unconcious                           <dbl> 0, 0, 0, 1, 0, 0, 0, 0, …\n$ captured                                      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ declared_dead                                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ redressed                                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ depowered                                     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ clothing_torn                                 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ subject_to_torture                            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ quits_team                                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ surrenders                                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ number_of_kills_humans                        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ number_of_kills_non_humans                    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ initiates_physical_conflict                   <chr> NA, NA, \"1\", NA, NA, NA,…\n$ expresses_reluctance_to_fight                 <dbl> NA, NA, 1, NA, NA, NA, N…\n$ on_a_date_with_which_character                <chr> NA, NA, NA, NA, NA, NA, …\n$ kiss_with_which_character                     <chr> NA, NA, NA, NA, NA, NA, …\n$ hand_holding_with_which_character             <chr> \"Moira MacTaggert\", NA, …\n$ dancing_with_which_character                  <chr> NA, NA, NA, NA, NA, NA, …\n$ flying_with_another_character                 <chr> NA, NA, NA, \"Storm\", \"Je…\n$ arm_in_arm_with_which_character               <chr> NA, NA, NA, NA, NA, NA, …\n$ hugging_with_which_character                  <chr> NA, NA, NA, NA, NA, NA, …\n$ physical_contact_other                        <chr> \"Moira MacTaggert\", \"Sto…\n$ carrying_with_which_character                 <chr> NA, NA, NA, NA, NA, NA, …\n$ shared_bed_with_which_character               <lgl> NA, NA, NA, NA, NA, NA, …\n$ shared_room_domestically_with_which_character <lgl> NA, NA, NA, NA, NA, NA, …\n$ explicitly_states_i_love_you_to_whom          <chr> NA, NA, NA, NA, NA, NA, …\n$ shared_undress                                <chr> NA, NA, NA, NA, NA, NA, …\n$ shower_number_of_panels_shower_lasts          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ bath_number_of_panels_bath_lasts              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ depicted_eating_food                          <dbl> 1, 0, 0, 0, 0, 0, 0, 0, …\n$ visible_tears_number_of_panels                <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ visible_tears_number_of_intances              <dbl> 0, 0, 0, 0, 0, 0, 0, 0, …\n$ special_notes                                 <chr> NA, NA, NA, NA, NA, NA, …\n```\n:::\n:::\n\n\n\nSo, we can see in this dataset things like who Professor X held hands with in issue 97, how many humans were killed by Magneto in issue 105, etc. We see lots of NAs and 0s in this dataset. The only column I'm going to use from this is the rendered unconscious column, which will be outcome variable in the models later.\n\nIn the character_visualization dataset, each row represents a per-issue count of the number of times a character is depicted, speaks, thinks, has a narrative statement (I think this is probably only relevant for the narrator character?), either when the character is in costume or not in costume.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharacter_visualization %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 9,800\nColumns: 7\n$ issue     <dbl> 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, …\n$ costume   <chr> \"Costume\", \"Costume\", \"Costume\", \"Costume\", \"Costume\", \"Cost…\n$ character <chr> \"Editor narration\", \"Omnipresent narration\", \"Professor X = …\n$ speech    <dbl> 0, 0, 0, 7, 24, 0, 11, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ thought   <dbl> 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ narrative <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ depicted  <dbl> 0, 0, 0, 10, 23, 0, 9, 17, 17, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n```\n:::\n:::\n\n\n\nIn the location dataset, each row corresponds to a location in which part of the issue takes place, with as many locations listed per issue as appear in that issue. The dataset also includes a \"context\" column that describes things like whether the location is shown in the present, as part of a flashback, in a dream, etc. Here's a glimpse:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocations %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 1,413\nColumns: 4\n$ issue    <dbl> 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 9…\n$ location <chr> \"Space\", \"X-Mansion\", \"Rio Diablo Research Facility\", \"Kenned…\n$ context  <chr> \"Dream\", \"Present\", \"Present\", \"Present\", \"Present\", \"Present…\n$ notes    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Cuts back and fo…\n```\n:::\n:::\n\n\n\nAcross these datasets, it probably makes the most sense to aggegrate data up to the issue level, since that's kind of the lowest common denominator here. So, essentially the question I'm going to try to answer in this blog post is:\n\n*What features of an X-men issue predict how many characters are rendered unconscious in that issue?*\n\nFirst, let's look at the distribution of rendered unconscious:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncharacters %>%\n  count(issue, wt = rendered_unconcious, sort = TRUE) %>%\n  ggplot(aes(x = n)) +\n  geom_histogram(fill = lann, bins = 8)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nRight, so, this is a pretty strongly right-skewed distribution, which is sort of what we'd expect from a Poisson distribution, especially one with a low expected number of events (which I'd imagine is the case in comic books).\n\n## Cleaning, Aggregating, and Joining\n\nNext, let's aggregate our data up to the issue level. This will give us data where a row represents an issue rather than a character within an issue or a location within an issue. We'll start with the characters dataset. There's a lot we *could* do with this data, but because there are only 183 issues represented in this dataset, we need to be cognizant about how many predictors we're including. So the only variable I'm going to use here is rendered unconscious as the outcome, which will represent the number of characters rendered unconscious in a given issue.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrend_df <- characters %>%\n  group_by(issue) %>%\n  summarize(rendered_unconscious = sum(rendered_unconcious, na.rm = FALSE))\n```\n:::\n\n\n\nNext, let's work on the character_visualization dataset. Again, trying to keep the number of predictors relatively small, I'm going to winnow this down to represent counts of how many times a handful of key characters are depicted in each issue. I don't know a ton about the X-men, but I know who some of the more important characters are, so I'm going to choose Wolverine, Professor X, Magneto, and Jean Grey here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchar_sum <- character_visualization %>%\n  filter(str_detect(character, \"Wolverine|Xavier|Jean Grey|Magneto\")) %>%\n  group_by(issue, character) %>%\n  summarize(depict = sum(depicted, na.rm = FALSE)) %>%\n  mutate(character = case_when(\n    str_detect(character, \"Jean Grey\") ~ \"Jean_Grey\",\n    str_detect(character, \"Wolv\") ~ \"Wolverine\",\n    str_detect(character, \"Magneto\") ~ \"Magneto\",\n    str_detect(character, \"Xavier\") ~ \"Professor_X\"\n  )) %>%\n  pivot_wider(\n    names_from = character,\n    values_from = depict\n  )\n```\n:::\n\n\n\nNext, let's work on our locations dataset. First, let's look at the most common locations. Again, since we only have 183 rows in our dataset that we're modeling with, I only want to choose a handful of variables to include in the model here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocations %>%\n  count(location, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 785 × 2\n   location                             n\n   <chr>                            <int>\n 1 X-Mansion                          100\n 2 Danger Room                         27\n 3 Space                               19\n 4 Muir Island, Scotland               14\n 5 Unspecified region in Australia     14\n 6 Eagle Plaza, Dallas Texas           11\n 7 Central Park                        10\n 8 Morlock residence under New York    10\n 9 Princess Lilandra's Home Planet     10\n10 San Francisco                       10\n# … with 775 more rows\n```\n:::\n:::\n\n\n\nOk, so, I'm just going to go with the 3 most common locations: the X-mansion, the Danger Room (whatever that is), and Space. Danger Room sounds to me like a place where people might be rendered unconscious.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_locs <- locations %>%\n  count(location, sort = TRUE) %>%\n  top_n(3) %>%\n  pull(location)\n\nlocs_sum <- locations %>%\n  group_by(issue) %>%\n  summarize(mansion = use_locs[[1]] %in% location,\n            danger_room = use_locs[[2]] %in% location,\n            space = use_locs[[3]] %in% location) %>%\n  mutate(across(where(is_logical), as.numeric))\n```\n:::\n\n\n\nThis will return a dataset that tells us whether a given issue has the X-mansion, the Danger Room, or Space as a location.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocs_sum %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 183\nColumns: 4\n$ issue       <dbl> 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 1…\n$ mansion     <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0…\n$ danger_room <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0…\n$ space       <dbl> 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\n\nNow we can join the three datasets into one useful for modeling. I'm using an inner join here because, for whatever reason, the character visualization dataset has more issues represented than the others, and we only want issues that are represented in all 3 dataframes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nissues_joined <- reduce(list(rend_df, char_sum, locs_sum), ~inner_join(.x, .y, by = \"issue\"))\n```\n:::\n\n\n## Modeling\n\nCool, so now we're done preprocessing our data -- now we can specify our model.\n\nI mentioned before that one issue here is that this is a small set of data. We have 183 observations (again, each observation is an issue), which isn't many. One way to make our modeling more robust is to use bootstrap resampling (see our good friend [Wikipedia](https://en.wikipedia.org/wiki/Bootstrapping_(statistics)) for an explanation) and to fit models to several resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(0408)\n\nbooties <- bootstraps(issues_joined, times = 100)\n\nhead(booties$splits, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n<Analysis/Assess/Total>\n<183/68/183>\n\n[[2]]\n<Analysis/Assess/Total>\n<183/66/183>\n\n[[3]]\n<Analysis/Assess/Total>\n<183/66/183>\n\n[[4]]\n<Analysis/Assess/Total>\n<183/70/183>\n\n[[5]]\n<Analysis/Assess/Total>\n<183/64/183>\n```\n:::\n:::\n\n\n\nWhat we can see here is that every bootstrap sample has 183 rows in the analysis set, which is what the model will be trained on, and then some other number of rows in the assessment set. This other number is the out-of-bag sample -- the rows that weren't randomly sampled by the bootstrap process.\n\nNext, I'm going to set up a workflow. I think of this as like a little suitcase that can carry things I want to use in my model around -- I think that analogy might be from Julia Silge? Anyway, I'm going to start by adding the formula I want to use in my model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmen_wf <- workflow() %>%\n  add_formula(rendered_unconscious ~ Magneto + Jean_Grey + Wolverine + Professor_X + mansion + danger_room + space)\n```\n:::\n\n\n\nNow we can further specify the model. Remember that since our outcome is a count, we'll be fitting a Poisson regression. Looking at the outcome distribution earlier, I don't think I need to use a zero-inflated model here (although maybe? Again, this isn't really my expertise), so I'm just going to proceed with a regular Poisson regression, fit using the `{glmnet}` engine. I'm also going to tune the `penalty` and `mixture` arguments, which control the amount of total regularization applied to the model as well as the proportion of the penalty that is L1 (lasso) vs L2 (ridge regression).\n\n**Brief Interpolation on what a Poisson regression is**\nA Poisson regression is a generalized linear model (GLM) used to model count data. Like the name implies, GLMs are generalizations of linear models that use a link function, g(), to transform the expected value of the response (outcome) to a linear function of the predictor variables. Poisson regression uses a log link function to accomplish this transformation. For people interested in reading more, I really like John Fox's book, [*Applied Regression Analysis*](https://www.amazon.com/Applied-Regression-Analysis-Generalized-Linear/dp/1452205663/ref=pd_sbs_14_1/139-8800507-2098708?_encoding=UTF8&pd_rd_i=1452205663&pd_rd_r=e7cdfc71-d6fa-4967-abbc-e11aa551df8f&pd_rd_w=mqE5D&pd_rd_wg=fNSQ2&pf_rd_p=bdc67ba8-ab69-42ee-b8d8-8f5336b36a83&pf_rd_r=4R6NXGVFTRME8MRA7WY3&psc=1&refRID=4R6NXGVFTRME8MRA7WY3).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(poissonreg)\n\npoisson_mod <- poisson_reg(\n  penalty = tune(),\n  mixture = tune()\n) %>%\n  set_engine(\"glmnet\")\n```\n:::\n\n\n\nSince I'm tuning a couple of parameters, I need to make a grid with possible values to tune across\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoisson_tune <- grid_max_entropy(\n  penalty(),\n  mixture(), \n  size = 10\n)\n```\n:::\n\n\n\nAnd I'll drop the model spec into the previous workflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmen_wf <- xmen_wf %>%\n  add_model(poisson_mod)\n\nxmen_wf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n══ Workflow ════════════════════════════════════════════════════════════════════\nPreprocessor: Formula\nModel: poisson_reg()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\nrendered_unconscious ~ Magneto + Jean_Grey + Wolverine + Professor_X + \n    mansion + danger_room + space\n\n── Model ───────────────────────────────────────────────────────────────────────\nPoisson Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = tune()\n  mixture = tune()\n\nComputational engine: glmnet \n```\n:::\n:::\n\n\n\nAnd now we can fit the model using our bootstrap resamples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmen_fit <- tune_grid(\n  xmen_wf,\n  resamples = booties,\n  grid = poisson_tune\n)\n```\n:::\n\n\n\nOur models have fit, so now we can look at our results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxmen_fit %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 8\n    penalty mixture .metric .estimator   mean     n std_err .config             \n      <dbl>   <dbl> <chr>   <chr>       <dbl> <int>   <dbl> <chr>               \n 1 8.81e- 4  0.0155 rmse    standard   1.93     100 0.0894  Preprocessor1_Model…\n 2 8.81e- 4  0.0155 rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n 3 4.67e- 7  0.0676 rmse    standard   1.93     100 0.0896  Preprocessor1_Model…\n 4 4.67e- 7  0.0676 rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n 5 5.56e- 1  0.148  rmse    standard   1.71     100 0.0201  Preprocessor1_Model…\n 6 5.56e- 1  0.148  rsq     standard   0.0288   100 0.00426 Preprocessor1_Model…\n 7 4.76e-10  0.190  rmse    standard   1.93     100 0.0895  Preprocessor1_Model…\n 8 4.76e-10  0.190  rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n 9 1.09e- 2  0.500  rmse    standard   1.92     100 0.0841  Preprocessor1_Model…\n10 1.09e- 2  0.500  rsq     standard   0.0278   100 0.00403 Preprocessor1_Model…\n11 2.44e- 7  0.517  rmse    standard   1.94     100 0.0896  Preprocessor1_Model…\n12 2.44e- 7  0.517  rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n13 1.73e-10  0.622  rmse    standard   1.94     100 0.0896  Preprocessor1_Model…\n14 1.73e-10  0.622  rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n15 1.10e- 5  0.881  rmse    standard   1.94     100 0.0897  Preprocessor1_Model…\n16 1.10e- 5  0.881  rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n17 1.99e- 1  0.942  rmse    standard   1.69     100 0.0190  Preprocessor1_Model…\n18 1.99e- 1  0.942  rsq     standard   0.0302   100 0.00404 Preprocessor1_Model…\n19 5.97e-10  0.985  rmse    standard   1.94     100 0.0897  Preprocessor1_Model…\n20 5.97e-10  0.985  rsq     standard   0.0277   100 0.00398 Preprocessor1_Model…\n```\n:::\n:::\n\n\n\nOk, so, my limited understanding of Poisson regression is that neither RMSE or R-squared values are ideal metrics, and some googling led me to find that there's an [open issue to add a Poisson log loss metric to the yardstick package](https://github.com/tidymodels/yardstick/issues/146), so we'll gloss over these for now.\n\nAnyway, let's pick the best model here, finalize the model, and then fit it to our full training data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_params <- xmen_fit %>%\n  select_best(metric = \"rmse\")\n\nfinal_mod <- xmen_wf %>%\n  finalize_workflow(best_params) %>%\n  fit(data = issues_joined)\n```\n:::\n\n\n\nAnd let's check out how important how variables are. This should give us the coefficients from our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_mod %>%\n  pull_workflow_fit() %>% \n  vi()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 3\n  Variable    Importance Sign \n  <chr>            <dbl> <chr>\n1 mansion        0.157   NEG  \n2 danger_room    0.113   NEG  \n3 Professor_X    0.0197  POS  \n4 Jean_Grey      0.0133  POS  \n5 Wolverine      0.00938 POS  \n6 Magneto        0.00701 POS  \n7 space          0       NEG  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_mod %>%\n  pull_workflow_fit() %>% \n  vip(num_features = 7, fill = lann)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nRight, so, one thing to keep in mind here is that the location variables and the character variables are on different scales, so the effects aren't directly comparable. But the interpretation here is that more appearances of Professor X are more strongly associated with more characters rendered unconscious in an issue than are more appearances of Magneto, although all of these coefficients are positive, suggesting that more appearances of any of these four characters are associated with more renderings unconscious in that issue. Similarly, the effects of danger_room and mansion are negative, suggesting that if the issue features either of those locations, there tend to be fewer characters rendered unconscious. The coefficient for space is 0, which probably means it got regularized out. Probably the most important piece, here, though, is that these effects seem to be *very* small, which means they likely don't actually matter.\n\nI'm going to call it right here. Even though the model I built doesn't seem to have much explanatory power, it forced me to read some more about Poisson regression and to dig back into the tidymodels framework, which I'll count as a win. Plus it gives me an excuse to gather \"domain knowledge\" about comic books so I can do a better job next time.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}