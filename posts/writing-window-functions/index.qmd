---
title: "Writing Window Functions"
description: |
  Examples and tutorial for writing rolling aggregate/window functions
date: "2020-05-06"
categories: [R, Tutorial, Function Writing]
---


I was recently working on exploring some time series data for a [Kaggle competition](https://www.kaggle.com/c/m5-forecasting-accuracy) and found myself wanting to calculate the rolling average of some sales. I don't often work with time series data, so I had to look up functions to use to calculate rolling averages (n.b. that if you don't know what a rolling average is, read [here](https://en.wikipedia.org/wiki/Moving_average)), and I was surprised that dplyr doesn't have one built in. It turns out there are several packages that **do** have rolling aggregate (average, standard deviation, etc) functions, such as the [RcppRoll](https://CRAN.R-project.org/package=RcppRoll) package and the [zoo](https://CRAN.R-project.org/package=zoo) package. But I also thought it provided a nice opportunity to practice writing some of my own rolling aggregate functions, which I'm going to walk through here.

# Setup

First, I'm going to load packages. For this, I'm only using `{tidyverse}` (and within tidyverse, mostly `{purrr}` for iteration) and `{RcppRoll}` as a ground-truth to test my functions. I'm also going to use the `{glue}` package later on, but that's less central and I'll load it when I need it.

```{r setup, include=TRUE}
library(tidyverse)
library(RcppRoll)
```


Next, I'm going to set up a minimal tibble to use for calculations. This will have an day column and a val column. The val column is the one I'm going to be doing calculations on, and the day column is going to serve as an index for the rolling average. 

```{r tbl create}
set.seed(0408)

df <- tibble(
  day = c(1:250),
  val = rnorm(250, mean = 5, sd = 1)
)

df
```

# Step 1: Testing Iteration
So, my process for building this function is going to be to create something very basic with few variables first and then gradually abstract this out to make a more responsive function. Eventually, I'll get to a point where the rolling aggregation function will be general enough to allow for the specification of arbitrary aggregate functions and windows.

The first step, then, is just to test the logic of the calculation I need to create to calculate rolling averages. I'll do this by assuming a 28 day window (we'll be able to change the window later), create a "truth" to test against using RcppRoll's `roll_mean()` function, and then iterate using `map()`.

```{r test loop}
truth <- roll_mean(df$val, n = 28, align = "right")

test <- map_dbl(
  c(28:length(df$val)), #this represents the days I want to calculate the average for. I'm starting on day 28 (because I want a 28-day rolling average, 
  #and the first time I'll have 28 days of data is on day 28) and going through the last day
  function(a) {
    mean(df$val[(a - 27):a], na.rm = FALSE) 
  } #this specifies what I'm doing -- taking the mean of the 'val' column for each 28 day window 
  #(day 1-28, day 2-29, etc). If I don't subtract 1 window value when I subset, 
  #I'll actually get 29 days.
)

all.equal(truth, test) #this tests to see that the vectors are equal.
```

# Step 2: Building Out Functions

Great, so the logic of the calculation works. Now, let's extend it a little bit to create a function where I can specify the variable I want to use as well as the window I want to take the rolling average over.

```{r init func}
ee_roll_mean <- function(x, window) {

  map_dbl(
    c(window:length(x)),
    function(a) {
      mean(x[(a - window+1):a], na.rm = FALSE)
    }

  )
}

test_2 <- ee_roll_mean(df$val, 28)

all.equal(test_2, truth)
```


It works when we set the window value to 28, but let's also test that it works when we use a different window just to be safe.

```{r test win8}
truth_win8 <- roll_mean(df$val, n = 8, align = "right")

test_win8 <- ee_roll_mean(df$val, window = 8)

all.equal(truth_win8, test_win8)

```


This works well for taking the rolling average -- we can specify the values we want to take the average over as well as the window for that average. But there are other functions we might be interested in getting rolling aggregates for as well. For instance, we might want to know the minimum or standard deviation of a value during some windows of time. Rather than write separate functions to do this, we can just extend our previous function to allow us to supply whichever aggregation function we want.

```{r extend agg}
ee_roll_func <- function(x, window, fn = mean) {

  map_dbl(
    c(window:length(x)),
    function(a) {
      fn(x[(a - window+1):a], na.rm = FALSE)
    }
  ) 
}
test_3 <- ee_roll_func(df$val, window = 8, fn = sd)

#testing against the RcppRoll function that does the same thing

truth_3 <- roll_sd(df$val, n = 8, align = "right")

all.equal(test_3, truth_3)
```

# Step 3: Pad the Output

One thing I'm noticing when looking at the output of each of these functions is that the length of the output vectors differ depending on the value we pass to the window argument.

```{r}
length(test)

length(test_win8)
```


I'm also noticing that these outputs are shorter than the length of the input vector (which is length 250). This makes sense because the function can't take, for example, the 28 day average before the 28th day, and so the length of the output vector will be 27 elements shorter than the length of the input vector.

This isn't so great if we want to add the results of this function back into our original df, though, because all of the vectors in a df need to be the same length. One solution is to "pad" our output vector with the appropriate amount of NA values so that it is the same length as the input vector and can therefore get added as a column in our df. So let's do that.

```{r}
ee_roll_func_padded <- function(x, window, fn = mean) {

  map_dbl(
    c(window:length(x)),
    function(a) {
      fn(x[(a - window+1):a], na.rm = FALSE)
    }
  ) %>%
    append(rep(NA_real_, times = window-1), values = .)   #this will pad the front with a number of NAs equal
  #to the window value minus 1

}
test_pad1 <- ee_roll_func_padded(df$val, window = 8) #note that if we don't supply a function, it will use the mean

test_pad2 <- ee_roll_func_padded(df$val, window = 20)

test_pad1
```


Notice that when we call `test_pad1` we get a vector with several NA values appended to the front. And when we look at the length of each of these vectors, we can see that they're length 250

```{r}
length(test_pad1)

length(test_pad2)
```

# Step 4: Use Functions to Add Columns to Data

Now that we have a function that reliably outputs a vector the same length as the columns in our dataframe, we can use it in conjunction with other tidyverse operations to add columns to our dataframe.

```{r}
df %>%
  mutate(roll_avg = ee_roll_func_padded(val, window = 8, fn = mean))
```


Finally, what if we wanted to get the rolling mean, standard deviation, min, and max all as new columns in our dataframe using the function we created. Our function allows us to pass in whichever aggregation function we want to use (well, probably not *any* function), so we can use `pmap()` from `{purrr}` to iterate over multiple functions and, in combination with the `{glue}` package, also set meaningful names for the new variables. 

I'll set up a dataframe called params that has the names of the new variables and the corresponding functions, then I'll loop over these names and functions to create new columns in our original dataframe. I'm not going to go over all of the code here, but if you're curious, it might be helpful to look at the documentation for `{glue}`, `{purrr}`, and possibly `{rlang}` (for the := operator).

```{r}
library(glue)

params <- tibble(
  names = c("roll_avg", "roll_sd", "roll_min", "roll_max"),
  fn = lst(mean, sd, min, max)
)

params %>%
  pmap_dfc(~df %>%
             transmute("{.x}" := ee_roll_func_padded(val, window = 8, fn = .y))) %>%
  bind_cols(df, .)
```


This gives us, for each 8-day window (e.g. day 1-8, day 2-9, etc) an average, standard deviation, minimum, and maximum of the val column.

# Wrapping Up

As sort of a final note, this activity was meant to be both an exercise for me in working through some programming using window functions as well as a walkthrough/tutorial for others interested in writing functions. That said, when I dive back into the Kaggle data I mentioned earlier, I'll use the functions from the `{RcppRoll}` package rather than my own. These are optimized to run quickly because they use C++ code and they're going to be more efficient than anything I just wrote. This doesn't matter much when we use a little 250 observation dataframe for demonstration, but it will make a difference working with several thousand observations at once.
